////
//  DeletionBanner.swift
//  joy_thief
//
//  Generated by RefactorBot â€“ extracted from original HabitDetailView.
//

import SwiftUI

extension HabitDetailRoot {
    struct DeletionBanner: View {
        let scheduledDeletion: StagedDeletionInfo
        @Binding var showingRestoreConfirmation: Bool
        let formatDate: (String) -> String
        
        var body: some View {
            VStack(spacing: 16) {
                HStack(spacing: 12) {
                    ZStack {
                        Circle()
                            .fill(Color.red.opacity(0.2))
                            .frame(width: 40, height: 40)
                        Image(systemName: "exclamationmark.triangle.fill")
                            .font(.custom("EBGaramond-Regular", size: 18)).fontWeight(.semibold)
                            .foregroundColor(.red)
                    }
                    VStack(alignment: .leading, spacing: 4) {
                        Text("Scheduled for Deletion")
                            .jtStyle(.body)
                            .foregroundColor(.red)
                        Text("Will be deleted on \(formatDate(scheduledDeletion.effectiveDate)) (\(scheduledDeletion.userTimezone))")
                            .jtStyle(.caption)
                            .foregroundColor(.white.opacity(0.8))
                    }
                    Spacer()
                }
                Button(action: { showingRestoreConfirmation = true }) {
                    HStack(spacing: 8) {
                        Image(systemName: "arrow.counterclockwise")
                            .font(.custom("EBGaramond-Regular", size: 14)).fontWeight(.semibold)
                        Text("Restore Habit")
                            .jtStyle(.body)
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 20)
                    .padding(.vertical, 12)
                    .background(
                        RoundedRectangle(cornerRadius: 10)
                            .fill(Color.blue)
                            .overlay(
                                RoundedRectangle(cornerRadius: 10)
                                    .stroke(Color.blue.opacity(0.3), lineWidth: 1)
                            )
                    )
                }
            }
            .padding(20)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(
                        LinearGradient(
                            colors: [Color.red.opacity(0.15), Color.red.opacity(0.08)],
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        )
                    )
                    .overlay(
                        RoundedRectangle(cornerRadius: 16)
                            .stroke(
                                LinearGradient(
                                    colors: [Color.red.opacity(0.3), Color.red.opacity(0.1)],
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                ), lineWidth: 1
                            )
                    )
            )
            .padding(.horizontal, 20)
        }
    }
} 