import Foundation

struct AppConfig {
    // MARK: - Network Configuration
    // Replace with your backend URL (e.g., your Heroku app URL or local ngrok URL)
    static let baseURL = "https://my-backend-fe2a0c7ff899.herokuapp.com/api"
    
    // Replace with your Stripe publishable key from https://dashboard.stripe.com/apikeys
    static let stripePublishableKey = "pk_test_XXXXXXXXXXXXXXXXXXXXXXXX"  // Replace with your actual key
    
    // MARK: - Branch.io Configuration
    static let branchKey: String = {
        // Try to read from Info.plist first
        if let path = Bundle.main.path(forResource: "Info", ofType: "plist"),
           let plist = NSDictionary(contentsOfFile: path),
           let key = plist["branch_key"] as? String {
            print("üîë [AppConfig] Using Branch key from Info.plist")
            return key
        } else {
            // Fallback to hardcoded key - replace with your Branch.io key
            let fallbackKey = "key_test_XXXXXXXXXXXXXXXXXXXXXXXX"  // Replace with your actual key
            print("‚ö†Ô∏è [AppConfig] Using fallback Branch key")
            return fallbackKey
        }
    }()
    
    // MARK: - Debug Helpers
    static func printConfiguration() {
        print("üîß [AppConfig] Configuration Summary:")
        print("üîß [AppConfig] - Base URL: \(baseURL)")
        print("üîß [AppConfig] - Branch Key: \(branchKey.prefix(20))...")
        print("üîß [AppConfig] - Stripe Key: \(stripePublishableKey.prefix(20))...")
        
        // Test connectivity
        Task {
            await testConnectivity()
        }
    }
    
    // MARK: - Connectivity Testing
    static func testConnectivity() async {
        guard let url = URL(string: baseURL.replacingOccurrences(of: "/api", with: "")) else {
            print("‚ùå [AppConfig] Invalid base URL: \(baseURL)")
            return
        }
        
        do {
            print("üåê [AppConfig] Testing connectivity to: \(url)")
            let (_, response) = try await URLSession.shared.data(from: url)
            if let httpResponse = response as? HTTPURLResponse {
                print("‚úÖ [AppConfig] Server reachable - Status: \(httpResponse.statusCode)")
            }
        } catch {
            print("‚ùå [AppConfig] Server unreachable: \(error.localizedDescription)")
            print("üí° [AppConfig] Check if backend server is running and ngrok URL is current")
        }
    }
}
